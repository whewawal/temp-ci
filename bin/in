#!/bin/bash
set -e
set -o pipefail
exec 3>&1 # use fd 3 for script output
exec 1>&2 # send normal stdout to stderr for logging

jq -M -S . < /dev/stdin > /tmp/input

echo "script name: "$0
cd $1
echo
mkdir -p /root/.kube

KUBE_URL=$(jq -r .source.cluster_url < /tmp/input)
NAMESPACE=$(jq -r .source.namespace < /tmp/input)

KUBECTL="/usr/local/bin/kubectl --server=$KUBE_URL --namespace=$NAMESPACE"

# configure SSL Certs if available
if [[ "$KUBE_URL" =~ https.* ]]; then
    KUBE_CA=$(jq -r .source.cluster_ca < /tmp/input)
    KUBE_KEY=$(jq -r .source.admin_key < /tmp/input)
    KUBE_CERT=$(jq -r .source.admin_cert < /tmp/input)
    CA_PATH="/root/.kube/ca.pem"
    KEY_PATH="/root/.kube/key.pem"
    CERT_PATH="/root/.kube/cert.pem"
    
    echo "$KUBE_CA" | base64 -d > $CA_PATH
    echo "$KUBE_KEY" | base64 -d > $KEY_PATH
    echo "$KUBE_CERT" | base64 -d > $CERT_PATH
    
    KUBECTL="$KUBECTL --certificate-authority=$CA_PATH --client-key=$KEY_PATH --client-certificate=$CERT_PATH"
fi

# get kube resource id
RESOURCE_TYPE=$(jq -r .source.resource_type < /tmp/input)
RESOURCE_NAME=$(jq -r .source.resource_name < /tmp/input)
RESOURCE_PATH=$(jq -r .params.resource_path < /tmp/input)

echo
echo
if [[ -z "$RESOURCE_TYPE" ]] || [[ -z "$RESOURCE_NAME" ]]; then
    result=""
else
    export KUBECTL
    IMG=$($KUBECTL get -o json deployment $RESOURCE_NAME | jq -r '.spec.template.spec.containers[0].image')
    result="$(jq -n "{version:{container:\"$IMG\"}}")"
    result_details=$($KUBECTL get -o json deployment $RESOURCE_NAME)

fi
echo $result_details
echo
echo "$result" | jq -s add  >&3
